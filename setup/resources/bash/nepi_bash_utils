#!/bin/bash

##
## Copyright (c) 2024 Numurus, LLC <https://www.numurus.com>.
##
## This file is part of nepi-engine
## (see https://github.com/nepi-engine).
##
## License: 3-clause BSD, see https://opensource.org/licenses/BSD-3-Clause
##


# This file contains nepi bash utility functions

UTILSN="
#############################
## NEPI Util Functions ##
#############################"


###################################
# System Util Functions
###################################

# to ping internet
function pingi(){
    if ! ping -c 2 google.com; then
        echo "No Internet Connection"
        return 0
    else
        echo "Internet Connected"
        return 1
    fi
}
export -f pingi

# to ping nepi
function pingn(){
  ping $NEPI_IP
}
export -f pingn

# source bashrc
function sbrc(){
    source ${HOME}/.bashrc
}
export -f sbrc


UTILSN="${UTILSN}

### SYSTEM UTIL FUNCTIONS

pingi = Check for internet
sbrc = Source the current users bashrc file"


###################################
# File Util Functions
###################################

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ftext(){
grep -r "$@" ./*
}
export -f ftext

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ffile(){
find ./* -iname  "*$@*" 
}
export -f ffile

UTILSN="${UTILSN}

### FILE UTIL FUNCTIONS

ftext = Find text in files recursively
ffile = Find filenames with text match recursively"

###################################
# Git Util Functions
###################################

######################
# Git branch info
# Function to check if a folder is in a Git repository
is_git_repo() {
  local folder_path="$1"
  if [ -d "$folder_path/.git" ]; then
    # If .git directory exists directly, it's a repository root
    return 0
  fi

  # Change to the folder and check if it's inside a work tree
  (cd "$folder_path" 2>/dev/null && git rev-parse --is-inside-work-tree >/dev/null 2>&1)
  return $? # Return the exit status of the git command
}


if [ 1 ]; then #$(is_git_repo $PWD) -eq 1 ]; then
  export PS1="\u@\h \[\e[32m\]\w \[\e[91m\]\$(parse_git_branch)\[\e[00m\]$ "

  #GIT Command Line Branch Display
  parse_git_branch() {
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
  }

  #alias gitroot="cd $(git rev-parse --show-toplevel)"

  function pushn(){
  git add --all
  git commit -m "*$@*" 
  git push
  }



UTILSN="${UTILSN}

### Git UTIL FUNCTIONS

pushn = Add,commit,push repo changes with provided comment"

fi

######################
# FILE Functions
######################
function update_yaml_value(){
    KEY=$1
    #echo $KEY
    #export VAL=$2
    #echo $VAL
    FILE=$3
    #echo $FILE
    yq e -i '.'"$KEY"' = env(VAL)' $FILE
}
export -f update_yaml_value

function read_yaml_value(){
    VARIABLE=$1
    #echo=$VARIABLE
    KEY=$2
    #echo $KEY
    FILE=$3
    #echo=$FILE
    export ${VARIABLE}=$(yq e '.'"$KEY"'' $FILE)
    #yq e '.NEPI_HW' nepi_docker_config.yaml
    #echo $VARIABLE
}
export -f read_yaml_value

function read_yaml_array_value(){
    local -n VARIABLE="$1"
    KEY=$2
    echo $KEY
    FILE=$3
    echo $FILE
    mapfile -t array_list < <(yq e '.'"$KEY[]" $FILE)
    echo "Array elements:"
    for item in "${array_list[@]}"; do
        echo "- $item"

    done
    local declare -a ${VARIABLE}=()
    for item in "$VARIABLE"; do
        echo "- $item"
    done
    export $VARIABLE=$(yq e '.'"$KEY[]" $FILE)
    echo $VARIABLE
}
export -f read_yaml_array_value


#### Update Help Test
UTILSN="${UTILSN}

### NEPI FILE UTIL FUNCTIONS

write_to_yaml - Udates yaml key value given KEY VAL FILE"


###################################
# Docker Util Functions
###################################

if which docker &> /dev/null; then
  function dimg(){
    sudo docker images
  }

  function dps(){
    sudo docker ps -a
  }

  function drun(){
    sudo docker run $1
  }

  function dstop(){
    sudo docker stop $1
  }  

  function dattach(){
    sudo docker start -ai $1
  }

  function dlogin(){
    sudo docker exec -it $1 /bin/bash
  }

  function dcommit(){
    sudo docker commit $1  $2:$3
  }
  
UTILSN="${UTILSN}

### Docker UTIL FUNCTIONS

dimg = sudo docker images
dps = sudo docker ps -a
dstart = sudo docker start -ai <provided cont name>
dlogin = sudo docker exec -it <provided cont name> /bin/bash"

fi



###################################
# ROS Util Functions
###################################
NROS=/opt/nepi/nepi_engine/setup.bash
HAS_ROS=$(dpkg -l | grep ros-)
if [ 1 ]; then # [[ -z "$HAS_ROS" ]]; then

    NEEDS_ROS=1

    # Function to search for topic containing string
    function sros(){
      # Source ROS Env
      if [[ -v NROS ]]; then
        source $NROS
      else
        source /opt/ros/noetic/setup.bash
      fi
      NEEDS_ROS=0
    }

    export -f sros



    # Function to search for topic containing string
    function ftopic(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list | grep "$@" 
    }

    # Function to print all topics out
    function ltopics(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list
    }

    # Function to listen to topic
    function etopic(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic echo "$@" 
    }

    # Function to search for service containing string
    function fservice(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list | grep "$@" 
    }

    # Function to print all services out
    function lservices(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list
    }

    # to call service
    function cservice(){
    if [ $NEEDS_ROS -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice call "$@"
    }

UTILSN="${UTILSN}

### ROS UTIL FUNCTIONS

sros = source ros bash setup
ltopics = List all active topics
ftopic = Find topics containing provided string
etopic = Echo to provided topic
lservices = List all active services
fservice = Find services containing provided string
cservice = Call service"

fi


###################################
# NEPI DEV Util Functions
###################################

  SOURCE_FOLDER=${NEPI_SOURCE}/nepi_engine_ws

  function nepiclone(){
  if [ ! -d "${NEPI_SOURCE}" ]; then
    sudo mkdir $NEPI_SOURCE
    sudo chmod -R ${USER}:${USER} $NEPI_SOURCE
  fi
  if [ -d "${NEPI_SOURCE}" ]; then
    if [ -d "${SOURCE_FOLDER}" ]; then
      echo "NEPI Source Folder Exists: ${SOURCE_FOLDER}. Delete and try again"
    else
      cd ${NEPI_SOURCE}
      BRANCH=main
      if [[ "$NEPI_ROS" == "NOETIC" ]]; then
        SUBBRANCH=ros1_main
      else
        SUBBRANCH=ros2_main
      fi
      git clone git@github.com:nepi-engine/nepi_engine_ws.git
      cd nepi_engine_ws
      git checkout $BRANCH
      #git submodule update --init --recursive
      git submodule update 
      git submodule foreach git checkout $SUBBRANCH 
      git submodule foreach git pull origin $SUBBRANCH
    fi
  fi
  }

  function nepiclonedev(){
  if [ ! -d "${NEPI_SOURCE}" ]; then
    sudo mkdir $NEPI_SOURCE
    sudo chmod -R ${USER}:${USER} $NEPI_SOURCE
  fi
  if [ -d "${NEPI_SOURCE}" ]; then
    if [ -d "${SOURCE_FOLDER}" ]; then
      echo "NEPI Source Folder Exists: ${SOURCE_FOLDER}. Delete and try again"
    else
      cd ${NEPI_SOURCE}
      if [[ "$NEPI_ROS" == "NOETIC" ]]; then
        BRANCH=ros1_develop
        SUBBRANCH=ros1_main
      else
        BRANCH=ros2_develop
        SUBBRANCH=ros2_main
      fi
      git clone git@github.com:nepi-engine/nepi_engine_ws.git
      cd nepi_engine_ws
      git checkout $BRANCH
      #git submodule update --init --recursive
      git submodule update 
      git submodule foreach git checkout $SUBBRANCH
      git submodule foreach git pull origin $SUBBRANCH
    fi
  fi
  }


  ## NEPI deploy complete
  alias nepidpl="
  cd $SOURCE_FOLDER
  ./deploy_nepi_complete.sh"

  # NEPI deploy repos
  alias repodpl="
  cd $SOURCE_FOLDER
  ./deploy_nepi_repos.sh"

UTILSN="${UTILSN}

### NEPI DEV UTIL FUNCTIONS

nepiclone = clone nepi main repo
nepiclonedev = clone nepi dev repo

nepidpl = deploy nepi complete
repodpl = deploy specific repos"

###################################
# NEPI SYSTEM Util Functions
###################################

if [ 1 ]; then #pip show "nepi_sdk" > /dev/null 2>&1; then



  # NEPI stop and start shortcuts
  function nepistop(){
    if [[ "$NEPI_IN_CONTAINER" -eq 1 ]]; then
      sudo supervisorctl stop nepi_engine
    else
      sudo systemctl stop nepi_engine
    fi
  }

  function nepistart(){
    if [[ "$NEPI_IN_CONTAINER" -eq 1 ]]; then
      sudo ${NEPI_ETC}/nepi_env/nepi_launch.sh
    else
      sudo ${NEPI_ETC}/nepi_env/nepi_launch.sh
    fi
  }

  # copy arvhived images to install folder
  function mimg(){
      nimg=$NEPI_IMPORT_PATH
      narch=$NEPI_EXPORT_PATH
      if [[ "$nimg" != "$narch" ]]; then
        mv ${narch}/* $nimg/
      fi
  }




  BUILD=${NEPI_STORAGE}/nepi_src/nepi_engine_ws
  ## NEPI build shortcuts
  alias nepibld="
  cd $BUILD
  ./build_nepi_complete.sh"

  # NEPI build shortcuts
  alias codebld="
  cd $BUILD
  ./build_nepi_code.sh"

  # NEPI build shortcuts
  alias ruibld="
  cd $BUILD
  ./build_nepi_rui.sh"





UTILSN="${UTILSN}

### NEPI SYSTEM UTIL FUNCTIONS

nepistart = start the nepi processes
nepistop = stop the nepi processe

mimg = Move archived nepi images to nepi image install folder

nepibld = build/deploy all nepi repos and RUI
codebld = build/deploy all nepi repos
ruibld = build/deploy rui system"
fi

##############################
# Print out the nepi shortcuts
##############################

function utilsn(){
    echo "$UTILSN"
}
export -f utilsn


