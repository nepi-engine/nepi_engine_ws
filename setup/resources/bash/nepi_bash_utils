#!/bin/bash

##
## Copyright (c) 2024 Numurus, LLC <https://www.numurus.com>.
##
## This file is part of nepi-engine
## (see https://github.com/nepi-engine).
##
## License: 3-clause BSD, see https://opensource.org/licenses/BSD-3-Clause
##


# This file contains nepi bash utility functions

#echo "########################"
#echo "STARTING NEPI Bash Utils"
#echo "########################"


utilsn="#############################
## NEPI Util Functions ##
#############################"


###################################
# System Util Functions
###################################

# echo variable value
function echovar(){
    local var_name="$1"
    echo "$var_name: ${!var_name}"
}
export -f echovar

# ping internet
function pingi(){
    if ! ping -c 2 google.com; then
        echo "No Internet Connection"
        return 0
    else
        echo "Internet Connected"
        return 1
    fi
}
export -f pingi

# ping nepi
function pingn(){
  ping ${NEPI_IP}
}
export -f pingn

# source bashrc
function sbrc(){
    source /home/${USER}/.bashrc
}
export -f sbrc

function sdhcp(){
    sudo dhclient -r
    sudo dhclient
    sudo dhclient -nw
}
export -f sdhcp

utilsn="${utilsn}
################################
### SYSTEM UTIL FUNCTIONS
################################
pingi = Check for internet
sbrc = Source the current users bashrc file
sdhcp = Start DHCP Internet Client"


###################################
# File Util Functions
###################################

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ftext(){
grep -r "$@" ./*
}
export -f ftext

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ffile(){
find ./* -iname  "*$@*" 
}
export -f ffile

function update_text_value(){
  KEY=$2
  UPDATE=$3
  FILE=$1
  if [ -f "$FILE" ]; then
    if grep -q "$KEY" "$FILE"; then
      sed -i "/^$KEY/c\\$UPDATE" "$FILE"
    else
      echo "$UPDATE" | sudo tee -a $FILE
    fi
  else
    echo "File not found ${FILE}"
  fi
}
export -f update_text_value


function update_yaml_value(){
    export UPDATE_YAML_KEY=$1
    #echo $UPDATE_YAML_KEY
    export UPDATE_YAML_VAL=$2
    #echo $UPDATE_YAML_VAL
    export UPDATE_YAML_FILE=$3
    #echo $UPDATE_YAML_FILE
    if [ -z "$my_variable" ]; then
      echo "my_variable is empty or unset."
    else
      echo "my_variable is not empty."
    fi

    yq e -i '.'"$UPDATE_YAML_KEY"' = env(UPDATE_YAML_VAL)' $UPDATE_YAML_FILE
}
export -f update_yaml_value

function export_yaml_value(){
    KEY=$1
    #echo $KEY
    VARIABLE=$2
    #echo=$VARIABLE
    FILE=$3
    #echo=$FILE
    verbose=0
    value=$(yq e '.'"$KEY"'' $FILE)
    export ${VARIABLE}=$value
    #Secho "${VARIABLE}=${value}"
}
export -f export_yaml_value

function load_config_file(){
    config_file=$1
    echo $config_file
    if [ -f "$config_file" ]; then
        keys=($(yq e 'keys | .[]' ${config_file}))
        for key in "${keys[@]}"; do
            export_yaml_value "${key}" "${key}" "$config_file" 
        done
    else
        echo "Config file not found ${config_file}"
    fi
}

export -f load_config_file

function print_config_file(){
    echo $1
    config_file=${1}
    if [ -f "$config_file" ]; then
        CONFIGN="#############################
        ## NEPI Config Settings ##
        #############################
        FILE=${config_file}"

        keys=($(yq e 'keys | .[]' ${config_file}))
        for key in "${keys[@]}"; do
            value=$(yq e '.'"$key"'' $config_file)
            echo "${key}=${value}"
            CONFIGN="${CONFIGN}
            ${key}=${!key}"
        done
        echo $CONFIG
    else
        echo "Config file not found ${config_file}"
    fi
}

export -f print_config_file

#### Update Help Test
utilsn="${utilsn}
################################
### NEPI FILE UTIL FUNCTIONS
################################
ftext = Find text in files recursively
ffile = Find filenames with text match recursively
update_text_value = Adds or Replaces value in text file given FILE KEY UPDATE_STRING FILE
update_yaml_value = Update entry in yaml file given KEY VAL FILE
export_yaml_value = Exports the value of yaml entry to system variable given KEY VARIBLE FILE
load_config_file = Exports all of the yaml entries to system variables given FILE"



###################################
# Git Util Functions
###################################

head_name=$(git rev-parse --abbrev-ref HEAD >/dev/null 2>&1)
if [ "$?" -eq 0 ]; then #$(is_git_repo $PWD) -eq 1 ]; then
  export PS1="\u@\h \[\e[32m\]\w \[\e[91m\]\$(parse_git_branch)\[\e[00m\]$ "

  #GIT Command Line Branch Display
  parse_git_branch() {
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
  }
fi



###################################
# Docker Util Functions
###################################

if which docker &> /dev/null; then
  function dimg(){
    sudo docker images
  }

  function dps(){
    sudo docker ps -a
  }

  
utilsn="${utilsn}
###########################
### Docker UTIL FUNCTIONS
###########################
dimg = sudo docker images
dps = sudo docker ps -a"

fi



###################################
# ROS Util Functions
###################################
NROS=/opt/nepi/nepi_engine/setup.bash
ROS=/opt/ros/noetic/setup.bash
HAS_ROS=$(dpkg -l | grep ros-)
if [ 1 ]; then # [[ -z "$HAS_ROS" ]]; then

    NEEDS_ROS=1

    # Function to search for topic containing string
    function sros(){
      # Source ROS Env
      if [[ -f "$ROS" ]]; then
        source ${ROS}
      else
        echo "No Ros Setup File Found"
      fi
      NEEDS_ROS=0
    }

    export -f sros

        function snros(){
      # Source NEPI ROS Env
      if [[ -f "$NROS" ]]; then
        source ${NROS}
      else
        echo "No Ros Setup File Found"
      fi
      NEEDS_ROS=0
    }

    export -f snros

    # Function to search for topic containing string
    function ftopic(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list | grep "$@" 
    }

    # Function to print all topics out
    function ltopics(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list
    }

    # Function to listen to topic
    function etopic(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic echo "$@" 
    }

    # Function to search for service containing string
    function fservice(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list | grep "$@" 
    }

    # Function to print all services out
    function lservices(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list
    }

    # to call service
    function cservice(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice call "$@"
    }

utilsn="${utilsn}
###########################
### ROS UTIL FUNCTIONS
###########################
sros = source ros bash setup
snros = source nepi ros bash setup
ltopics = List all active topics
ftopic = Find topics containing provided string
etopic = Echo to provided topic
lservices = List all active services
fservice = Find services containing provided string
cservice = Call service"

fi


export UTILSN=${utilsn}

export NEPI_UTILS_SOURCED=1


