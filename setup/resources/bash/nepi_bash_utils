#!/bin/bash

##
## Copyright (c) 2024 Numurus, LLC <https://www.numurus.com>.
##
## This file is part of nepi-engine
## (see https://github.com/nepi-engine).
##
## License: 3-clause BSD, see https://opensource.org/licenses/BSD-3-Clause
##


# This file contains nepi bash utility functions

#echo "########################"
#echo "STARTING NEPI Bash Utils"
#echo "########################"


utilsn="#############################
## NEPI Util Functions ##
#############################"


###################################
# System Util Functions
###################################

# echo variable value
function echovar(){
    local var_name="$1"
    echo "$var_name: ${!var_name}"
}
export -f echovar

# ping internet
function pingi(){
    if ! ping -c 2 google.com; then
        echo "No Internet Connection"
        return 0
    else
        echo "Internet Connected"
        return 1
    fi
}
export -f pingi

# ping nepi
function pingn(){
  ping ${NEPI_IP}
}
export -f pingn

# source bashrc
function sbrc(){
    source /home/${USER}/.bashrc
}
export -f sbrc

function sdhcp(){
    sudo dhclient -r
    sudo dhclient
    sudo dhclient -nw
}
export -f sdhcp

utilsn="${utilsn}
### SYSTEM UTIL FUNCTIONS
pingi = Check for internet
sbrc = Source the current users bashrc file
sdhcp = Start DHCP Internet Client"


###################################
# File Util Functions
###################################

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ftext(){
grep -r "$@" ./*
}
export -f ftext

# Function to search for text
# Example call: find 'nepi_sdk.parse_header_msg'
function ffile(){
find ./* -iname  "*$@*" 
}
export -f ffile

function update_text_value(){
  KEY=$2
  UPDATE=$3
  FILE=$1
  if [ -f "$FILE" ]; then
    if grep -q "$KEY" "$FILE"; then
      sed -i "/^$KEY/c\\$UPDATE" "$FILE"
    else
      echo "$UPDATE" | sudo tee -a $FILE
    fi
  else
    echo "File not found ${FILE}"
  fi
}
export -f update_text_value


function update_yaml_value(){
    KEY=$1
    #echo $KEY
    VAL=$2
    #echo $VAL
    FILE=$3
    #echo $FILE
    yq e -i '.'"$KEY"' = env(VAL)' $FILE
}
export -f update_yaml_value

function export_yaml_value(){
    KEY=$1
    #echo $KEY
    VARIABLE=$2
    #echo=$VARIABLE
    FILE=$3
    #echo=$FILE
    verbose=0
    value=$(yq e '.'"$KEY"'' $FILE)
    export ${VARIABLE}=$value
    #Secho "${VARIABLE}=${value}"
}
export -f export_yaml_value

function load_config_file(){
    config_file=$1
    echo $config_file
    if [ -f "$config_file" ]; then
        keys=($(yq e 'keys | .[]' ${config_file}))
        for key in "${keys[@]}"; do
            export_yaml_value "${key}" "${key}" "$config_file" 
        done
    else
        echo "Config file not found ${config_file}"
    fi
}

export -f load_config_file

function print_config_file(){
    echo $1
    config_file=${1}
    if [ -f "$config_file" ]; then
        CONFIGN="#############################
        ## NEPI Config Settings ##
        #############################
        FILE=${config_file}"

        keys=($(yq e 'keys | .[]' ${config_file}))
        for key in "${keys[@]}"; do
            value=$(yq e '.'"$key"'' $config_file)
            echo "${key}=${value}"
            CONFIGN="${CONFIGN}
            ${key}=${!key}"
        done
        echo $CONFIG
    else
        echo "Config file not found ${config_file}"
    fi
}

export -f print_config_file

#### Update Help Test
utilsn="${utilsn}
### NEPI FILE UTIL FUNCTIONS
ftext = Find text in files recursively
ffile = Find filenames with text match recursively
update_text_value = Adds or Replaces value in text file given FILE KEY UPDATE_STRING FILE
update_yaml_value = Update entry in yaml file given KEY VAL FILE
export_yaml_value = Exports the value of yaml entry to system variable given KEY VARIBLE FILE
load_config_file = Exports all of the yaml entries to system variables given FILE"



###################################
# Git Util Functions
###################################

function gitn(){
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\033[0;32m$(__git_ps1 " (%s)")\033[0m\$ '
}




utilsn="${utilsn}
### Git UTIL FUNCTIONS
gitn = adds git repo info to terminal prompt"




###################################
# Docker Util Functions
###################################

if which docker &> /dev/null; then
  function dimg(){
    sudo docker images
  }

  function dps(){
    sudo docker ps -a
  }

  
utilsn="${utilsn}
### Docker UTIL FUNCTIONS
dimg = sudo docker images
dps = sudo docker ps -a"

fi



###################################
# ROS Util Functions
###################################
NROS=/opt/nepi/nepi_engine/setup.bash
ROS=/opt/ros/*/setup.bash
HAS_ROS=$(dpkg -l | grep ros-)
if [ 1 ]; then # [[ -z "$HAS_ROS" ]]; then

    NEEDS_ROS=1

    # Function to search for topic containing string
    function sros(){
      # Source ROS Env
      if [[ -f "$ROS" ]]; then
        source ${ROS}
      else
        echo "No Ros Setup File Found"
      fi
      NEEDS_ROS=0
    }

    export -f sros

        function snros(){
      # Source NEPI ROS Env
      if [[ -f "$NROS" ]]; then
        source ${NROS}
      else
        echo "No Ros Setup File Found"
      fi
      NEEDS_ROS=0
    }

    export -f snros

    # Function to search for topic containing string
    function ftopic(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list | grep "$@" 
    }

    # Function to print all topics out
    function ltopics(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic list
    }

    # Function to listen to topic
    function etopic(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rostopic echo "$@" 
    }

    # Function to search for service containing string
    function fservice(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list | grep "$@" 
    }

    # Function to print all services out
    function lservices(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice list
    }

    # to call service
    function cservice(){
    if [ "$NEEDS_ROS" -eq 1 ]; then
      sleep 1 & sros
      wait
      NEEDS_ROS=0
    fi
    rosservice call "$@"
    }

utilsn="${utilsn}
### ROS UTIL FUNCTIONS
sros = source ros bash setup
snros = source nepi ros bash setup
ltopics = List all active topics
ftopic = Find topics containing provided string
etopic = Echo to provided topic
lservices = List all active services
fservice = Find services containing provided string
cservice = Call service"

fi


###################################
# NEPI DEV Util Functions
###################################
export SOURCE_FOLDER=/home/${USER}/nepi_engine_ws
GREEN='\033[0;32m'
RED='\033[0;31m'

## NEPI deploy complete
alias nepidpl="
cd $SOURCE_FOLDER
./deploy_nepi_complete.sh"

# NEPI deploy repos
alias repodpl="
cd $SOURCE_FOLDER
./deploy_nepi_repos.sh"

utilsn="${utilsn}
### NEPI DEV UTIL FUNCTIONS
nepidpl = deploy nepi complete
repodpl = deploy specific repos"

function pushn(){
  git add --all
  git commit -m "*$@*" 
  git push
  cur_folder=${PWD##*/}
  par_path=$(dirname "$(pwd)")
  par_folder=${par_path##/*}
  if [[ "$cur_folder" != 'nepi_engine_ws' || "$par_folder" != 'nepi_engine_ws' ]]; then
    echo -e "${GREEN}Pushing to repo ${PWD##*/} Head ros1_main"
    git push origin HEAD:ros1_main
    if [ ! $? -eq 0 ]; then
      echo -e "${RED}Push Failed"
      return 1 # Failed
    fi
  fi
  echo -e "${GREEN}Push Successfully"
}


function pushna(){
  failed=0
  if [ -d "$SOURCE_FOLDER" ]; then
    commit_comment=*$@*
    src_folder=${SOURCE_FOLDER}/src
    cd $src_folder
    for d1 in */; do
      if [ -d "$d1" ]; then

        rep_folder=${src_folder}/${d1}
        echo ""
        echo ""
        echo "Processing Repo ${d1}"
        echo "*********************"
        echo ""
        cd ${rep_folder}
        echo 1
        for d2 in */; do
          echo $d2
          if [ -d "$d2" ]; then
            echo 3
            proj_folder=${rep_folder}/${d2}
            echo 4
            cd ${proj_folder}
            echo 5
            if [ -f "${proj_folder}/.git" ]; then
              echo 6
              echo ""
              echo "${d2}"
              echo "--------------------"
              failed=pushn $commit_comment
              echo "Pushed ${d2}"
              if [[ "failed" -eq 1 ]]; then
                break
              fi
            fi
          fi
        done
        cd ${rep_folder}
        if [ -f "${rep_folder}/.git" and "$failed" -eq 0 ]; then
            echo ""
            echo "${d1}"
            echo "--------------------"
            failed=pushn $commit_comment
            echo "Pushed ${d1}"
            if [[ "$failed" -eq 1 ]]; then
              break
            fi
        fi
        cd $src_folder
      fi
    done
    cd ${SOURCE_FOLDER}
    if [ "$failed" -e 0 ]; then
      echo ""

      echo "nepi_engine_ws"
      echo "--------------------"
      pushn $commit_comment
      if [[ $? -eq 1S ]]; then
        success=0
      fi
    fi
  fi
}

utilsn="${utilsn}
### NEPI DEV UTIL FUNCTIONS
nepidpl = Deploy nepi complete to nepi device
repodpl = Deploy repos to nepi device
pushn = Add,commit,push repo changes with provided comment
pushna = Add,commit,push repo changes with provided comment for all nepi repos"

###################################
# NEPI SYSTEM Util Functions
###################################

export NEPI_USER=nepi
export NEPI_HOME=/home/nepi
export NEPI_ENGINE=/opt/nepi/nepi_engine
export NEPI_STORAGE=/mnt/nepi_storage

if [ 1 ]; then


  ## NEPI deploy complete
  alias nepihomeNEPI_HOME="
  cd ${NEPI_HOME}"


  # NEPI stop and start shortcuts
  function nepistop(){

    service_name="nepi_engine"
    if systemctl status > /dev/null 2>&1; then
      if systemctl is-active --quiet "$service_name.service" ; then
        sudo systemctl stop "$service_name"
      fi
    elif supervisorctl status > /dev/null 2>&1; then
      #echo "Supervisor and its managed processes appear to be running."
      status = supervisorctl status "$service_name" 2>/dev/null
      if echo "$status" | grep -q "RUNNING"; then
        sudo supervisorctl stop nepi_engine
      fi
    fi

  }

  function nepistart(){
      sudo ${NEPI_ENGINE}/etc/nepi_env/nepi_launch.sh
  }

  # copy arvhived images to install folder
  function ndhcp(){
      if [[ -f "/opt/nepi/scripts/nepi_dhcp_start" ]]; then
        export ENABLE_NEPI_DHCP=1
        source /opt/nepi/scripts/nepi_dhcp_start
      fi
  }

  function snvm(){
    echo ' ' | sudo tee -a $BASHRC
    echo '##### NVM Config #####' | sudo tee -a $BASHRC
    echo 'export NVM_DIR='/home/${NEPI_USER}'/.nvm' | sudo tee -a $BASHRC
    echo '[ -s ${NVM_DIR}/nvm.sh ] && \. ${NVM_DIR}/nvm.sh' | sudo tee -a $BASHRC
    echo '[ -s ${NVM_DIR}/bash_completion ] && \. ${NVM_DIR}/bash_completion' | sudo tee -a $BASHRC
  }

  BUILD=${NEPI_STORAGE}/nepi_src/nepi_engine_ws
  ## NEPI build shortcuts
  alias nepibld="
  cd $BUILD
  ./build_nepi_complete.sh"

  # NEPI build shortcuts
  alias codebld="
  cd $BUILD
  ./build_nepi_code.sh"

  # NEPI build shortcuts
  alias ruibld="
  cd $BUILD
  ./build_nepi_rui.sh"





utilsn="${utilsn}
### NEPI SYSTEM UTIL FUNCTIONS
nepihome = change to nepi home dir
nepistart = start the nepi processes
nepistop = stop the nepi processe
mvimg = Move archived nepi images to nepi image install folder
snvm = Sources NVM (Node Version Manager) nmv.sh
nepibld = build/deploy all nepi repos and RUI
codebld = build/deploy all nepi repos
ruibld = build/deploy rui system"
fi


export UTILSN=${utilsn}

export NEPI_UTILS_SOURCED=1


