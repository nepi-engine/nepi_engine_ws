./nepi_apps/nepi_app_pointcloud_viewer/scripts/pointcloud_viewer_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.update_pointcloud_subs_interval_sec), self.updatePointcloudSubsThread)
./nepi_apps/nepi_app_pointcloud_viewer/scripts/pointcloud_viewer_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.update_data_products_interval_sec), self.updateDataProductsThread)
./nepi_apps/nepi_app_onvif_mgr/scripts/onvif_mgr_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.discovery_interval_s), self.runDiscovery, oneshot=True)
./nepi_apps/nepi_app_onvif_mgr/scripts/onvif_mgr_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(delay), self.runDiscovery, oneshot=True)
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/devicemgmt.wsdl:						<xs:element name="TTL" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/devicemgmt.wsdl:						<xs:element name="UploadDelay" type="xs:duration"/>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/devicemgmt.wsdl:						<xs:element name="ExpectedDownTime" type="xs:duration"/>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/devicemgmt.wsdl:						<xs:element name="ExpectedDownTime" type="xs:duration"/>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/devicemgmt.wsdl:					<li>Client waits for delay duration if specified by server.</li>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/deviceio.wsdl:						<xs:element name="TimeOut" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/doorcontrol.wsdl:            <xs:element name="AccessTime" type="xs:duration" minOccurs="0"><xs:annotation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/doorcontrol.wsdl:            <xs:element name="OpenTooLongTime" type="xs:duration" minOccurs="0"><xs:annotation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/doorcontrol.wsdl:            <xs:element name="PreAlarmTime" type="xs:duration" minOccurs="0"><xs:annotation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/ptz.wsdl:						<xs:element name="Timeout" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:documentation>Range of duration greater equal Min duration and less equal Max duration.</xs:documentation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="Min" type="xs:duration"/>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="Max" type="xs:duration"/>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:element name="SessionTimeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:element name="SessionTimeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:element name="SessionTimeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="Timeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="TTL" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="DelayTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:element name="DefaultPTZTimeout" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="StayTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:documentation>Optional parameter to specify time duration of staying on this tour sport.</xs:documentation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="RecurringDuration" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:					<xs:documentation>Optional parameter to specify how long time duration the preset tour is recurred.</xs:documentation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="ResponseTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="MaximumRetentionTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/onvif.xsd:			<xs:element name="SessionTimeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="KeepAliveTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="WaitTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="KeepAliveTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="WaitTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="KeepAliveTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="WaitTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="KeepAliveTime" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/search.wsdl:						<xs:element name="WaitTime" type="xs:duration" minOccurs="0">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:					<xs:element name="HowLong" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:					<xs:element name="SampleInterval" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:					<xs:element name="PreRecordDuration" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:					<xs:element name="PostRecordDuration" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:							<xs:documentation>Recording after alarm recording duration</xs:documentation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:					<xs:element name="RecordDuration" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/actionengine.wsdl:							<xs:documentation>Record duration</xs:documentation>
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/events.wsdl:						<xs:element name="Timeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/events.wsdl:						<xs:element name="MaxTimeout" type="xs:duration">
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/b-2.xsd:    <xsd:union memberTypes="xsd:dateTime xsd:duration" />
./nepi_apps/nepi_app_onvif_mgr/etc/onvif/wsdl/advancedsecurity.wsdl:						<xs:element name="EstimatedCreationTime" type="xs:duration">
./nepi_apps/nepi_app_ai_targeting/scripts/ai_targeting_app_node.py:    'last_detection_timestamp': nepi_ros.ros_duration(0)                              
./nepi_apps/nepi_app_ai_targeting/scripts/ai_targeting_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.UDATE_PROCESS_DELAY), self.updaterCb)
./nepi_apps/nepi_app_ai_targeting/scripts/ai_targeting_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.IMG_PUB_PROCESS_DELAY), self.imagePubCb)
./nepi_apps/nepi_app_nav_pose/scripts/nav_pose_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.navpose_get_publish_callback, oneshot = True)
./nepi_apps/nepi_app_nav_pose/scripts/nav_pose_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.navpose_get_publish_callback, oneshot = True)
./nepi_apps/nepi_app_ai_pt_tracker/scripts/ai_pt_tracker_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.UPDATER_PROCESS_DELAY), self.updaterCb)
./nepi_apps/nepi_app_ai_pt_tracker/scripts/ai_pt_tracker_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.SCAN_TRACK_PROCESS_DELAY), self.scanTrackCb)
./nepi_apps/nepi_app_ai_pt_tracker/scripts/ai_pt_tracker_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.IMG_PUB_PROCESS_DELAY), self.imagePubCb)
./nepi_apps/nepi_app_ai_alerts/scripts/ai_alerts_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.UDATE_PROCESS_DELAY), self.updaterCb)
./nepi_apps/nepi_app_ai_alerts/scripts/ai_alerts_app_node.py:    nepi_ros.timer(nepi_ros.ros_duration(self.IMG_PUB_PROCESS_DELAY), self.imagePubCb)
./nepi_engine/nepi_ros_interfaces/msg/TimeStatus.msg:# Time since last sync message received from indexed server (seconds if no time-duration suffix)
./nepi_engine/nepi_ros_interfaces/msg/ImageMuxInput.msg:# Min/Max duration in secs before this input is 'satisfied'
./nepi_engine/nepi_ros_interfaces/msg/ImageMuxInput.msg:float32 min_duration_s
./nepi_engine/nepi_ros_interfaces/msg/ImageMuxInput.msg:float32 max_duration_s
./nepi_engine/nepi_ros_interfaces/msg/SingleAxisTimedMove.msg:# Duration, -1.0 for infinite duration
./nepi_engine/nepi_ros_interfaces/msg/SingleAxisTimedMove.msg:float32 duration_s
./nepi_engine/nepi_rui/src/rui_webserver/rui-app/src/Store.js:             "duration_s": -1},
./nepi_engine/nepi_rui/src/rui_webserver/rui-app/src/Store.js:             "duration_s": -1},
Binary file ./nepi_engine/nepi_env/config/opt/baumer/gentl_producers/libbgapi2_gige.cti.2.14.1 matches
Binary file ./nepi_engine/nepi_env/config/opt/baumer/gentl_producers/libbgapi2_usb.cti.2.14.1 matches
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:  transition-duration: 500ms;
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:    transition-duration: 100ms; }
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:    transition-duration: 300ms; }
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:  transition-duration: 200ms; }
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:  transition-duration: 0ms;
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:  transition-duration: 100ms;
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:  transition-duration: 100ms; }
./nepi_engine/nepi_env/config/usr/share/gnome-shell/theme/ubuntu.css:    transition-duration: 100ms;
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		const double rate_based_sleep_duration = 1.0 / my_rate;
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		const double remaining_rate_based_sleep = rate_based_sleep_duration - elapsed_sleep;
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		const double sleep_duration = std::min(remaining_rate_based_sleep, MAX_SLEEP_DURATION);
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		ros::Duration(sleep_duration).sleep();
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		elapsed_sleep += sleep_duration;
./nepi_engine/nepi_env/utilities/triggers/trigger_mgr_base.cpp:		if (elapsed_sleep >= rate_based_sleep_duration)
./nepi_engine/nepi_env/src/drivers/archive/lord_ahrs_driver.cpp:  std::chrono::milliseconds timeout = std::chrono::duration<int, std::milli>((int)(2000.0f / rate_for_timeout_hz));
./nepi_engine/nepi_env/src/drivers/archive/lord_ahrs_driver.cpp:    std::chrono::duration<uint32_t, std::milli>(rx_timeout_ms);
./nepi_engine/nepi_env/src/drivers/archive/lord_ahrs_driver.cpp:    const std::chrono::milliseconds remaining_timeout_ms = std::chrono::duration_cast<std::chrono::milliseconds>(timeout_time - curr_time);
./nepi_engine/nepi_env/src/drivers/archive/lord_ahrs_driver.cpp:    const std::chrono::milliseconds elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(curr_time - function_start_time);
./nepi_engine/nepi_sdk/src/nepi_sdk/nepi_ros.py:def start_timer_process(duration, callback_function, oneshot = False):
./nepi_engine/nepi_sdk/src/nepi_sdk/nepi_ros.py:  rospy.Timer(duration, callback_function, oneshot)
./nepi_engine/nepi_sdk/src/nepi_sdk/nepi_ros.py:def timer(duration, callback_function, oneshot = False):
./nepi_engine/nepi_sdk/src/nepi_sdk/nepi_ros.py:  rospy.Timer(duration, callback_function, oneshot)
./nepi_engine/nepi_sdk/src/nepi_sdk/nepi_ros.py:def duration(time_s):
./nepi_engine/nepi_sdk/src/nepi_sdk/device_if_ptx.py:        duration = 1000000.0 if (msg.duration_s < 0.0) else msg.duration_s
./nepi_engine/nepi_sdk/src/nepi_sdk/device_if_ptx.py:        self.moveYawCb(direction,  duration)
./nepi_engine/nepi_sdk/src/nepi_sdk/device_if_ptx.py:        duration = 1000000.0 if (msg.duration_s < 0.0) else msg.duration_s
./nepi_engine/nepi_sdk/src/nepi_sdk/device_if_ptx.py:        self.movePitchCb(direction, duration)
./nepi_engine/nepi_managers/scripts/ai_model_mgr.py:        nepi_ros.timer(nepi_ros.ros_duration(1), self.updaterCb, oneshot = True)
./nepi_engine/nepi_managers/scripts/ai_model_mgr.py:        nepi_ros.timer(nepi_ros.ros_duration(1), self.updaterCb, oneshot = True)
./nepi_engine/nepi_managers/scripts/apps_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.checkAndUpdateCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/apps_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(self.PUBLISH_STATUS_INTERVAL), self.publishStatusCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/apps_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.checkAndUpdateCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/drivers_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.checkAndUpdateCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/drivers_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(self.PUBLISH_STATUS_INTERVAL), self.publishStatusCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/drivers_mgr.py:    nepi_ros.timer(nepi_ros.ros_duration(1), self.checkAndUpdateCb, oneshot=True)
./nepi_engine/nepi_managers/scripts/system_mgr.py:        status_period = nepi_ros.ros_duration(1)  # TODO: Configurable rate?
./nepi_engine/nepi_managers/scripts/system_mgr.py:        rospy.Timer(nepi_ros.ros_duration(self.STATUS_PERIOD),
./nepi_engine/nepi_managers/scripts/network_mgr.py:        nepi_ros.timer(nepi_ros.ros_duration(self.BANDWIDTH_MONITOR_PERIOD_S), self.monitor_bandwidth_usage)
./nepi_engine/nepi_managers/scripts/network_mgr.py:        # Long duration internet check -- do oneshot and reschedule from within the callback
./nepi_engine/nepi_managers/scripts/network_mgr.py:        nepi_ros.timer(nepi_ros.ros_duration(self.INTERNET_CHECK_INTERVAL_S), self.internet_check, oneshot = True)
./nepi_engine/nepi_managers/scripts/network_mgr.py:                            self.retry_wifi_timer = nepi_ros.timer(nepi_ros.ros_duration(3), self.auto_retry_wifi_client_connect, oneshot=True)
./nepi_engine/nepi_managers/scripts/network_mgr.py:        nepi_ros.timer(nepi_ros.ros_duration(self.INTERNET_CHECK_INTERVAL_S), self.internet_check, oneshot = True)
./nepi_drivers/idx_drivers/idx_zed_node.py:        nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.checkZedNodeCb)
./nepi_drivers/idx_drivers/idx_v4l2_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/idx_drivers/idx_v4l2_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/idx_drivers/idx_onvif_generic_driver.py:        duration_s = stop - start
./nepi_drivers/idx_drivers/idx_onvif_generic_driver.py:        fps = img_count / duration_s
./nepi_drivers/idx_drivers/idx_onvif_generic_driver.py:        print("Captured " + str(img_count) + " images in " + str(duration_s) + "s (" + str(fps) + " FPS)")
./nepi_drivers/idx_drivers/idx_zed_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/idx_drivers/idx_zed_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/idx_drivers/idx_genicam_driver.py:            duration = time.time() - t0
./nepi_drivers/idx_drivers/idx_genicam_driver.py:            fps = num_successful_frames / duration
./nepi_drivers/idx_drivers/idx_genicam_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/idx_drivers/idx_genicam_discovery.py:    nepi_ros.start_timer_process(nepi_ros.ros_duration(1), self.detectAndManageDevices, oneshot = True)
./nepi_drivers/ptx_drivers/ptx_onvif_generic_node.py:    def moveYaw(self, direction, duration):
./nepi_drivers/ptx_drivers/ptx_onvif_generic_node.py:            self.driver.jog(pan_direction = driver_direction, tilt_direction = self.driver.PT_DIRECTION_NONE, speed_ratio = self.speed_ratio, time_s = duration)
./nepi_drivers/ptx_drivers/ptx_onvif_generic_node.py:    def movePitch(self, direction, duration):
./nepi_drivers/ptx_drivers/ptx_onvif_generic_node.py:            self.driver.jog(pan_direction = self.driver.PT_DIRECTION_NONE, tilt_direction = driver_direction, speed_ratio = self.speed_ratio, time_s = duration)
./nepi_drivers/ptx_drivers/ptx_kist_kpt20_node.py:            nepi_ros.start_timer_process(nepi_ros.ros_duration(0.2), self.check_timer_callback)
./nepi_drivers/ptx_drivers/ptx_kist_kpt20_node.py:    def moveYaw(self, direction, duration):
./nepi_drivers/ptx_drivers/ptx_kist_kpt20_node.py:            self.driver_jog(axis_str = self.pan_str, direction = direction, time_s = duration)
./nepi_drivers/ptx_drivers/ptx_kist_kpt20_node.py:    def movePitch(self, direction, duration):
./nepi_drivers/ptx_drivers/ptx_kist_kpt20_node.py:            self.driver_jog(axis_str = self.tilt_str, direction = direction, time_s = duration)
./nepi_drivers/lsx_drivers/lsx_sidus_ss182_node.py:      nepi_ros.start_timer_process(nepi_ros.ros_duration(0.2), self.check_timer_callback)
./nepi_drivers/lsx_drivers/lsx_deepsea_sealite_node.py:      nepi_ros.start_timer_process(nepi_ros.ros_duration(0.2), self.check_timer_callback)
./nepi_drivers/src/ptx_interface.cpp:    const float duration_s = (msg->duration_s < 0.0)? 1000000.0f : msg->duration_s;
./nepi_drivers/src/ptx_interface.cpp:    static_cast<PTXNode*>(_parent_node)->moveYaw(direction, speed, duration_s);
./nepi_drivers/src/ptx_interface.cpp:    const float duration_s = (msg->duration_s < 0.0)? 1000000.0f : msg->duration_s;
./nepi_drivers/src/ptx_interface.cpp:    static_cast<PTXNode*>(_parent_node)->movePitch(direction, speed, duration_s);
